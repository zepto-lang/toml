(define (toml:tokenize toml) 
  "tokenizes toml to array of tokens; consumes everything, even if it is multiple disjunctive objects;
    e.g. input:  \"'lol' = 1\"
         output: ((toml-id \"lol\") (prop-delim) (toml-num \"1\"))"
  (define (internal-tokenize input l)
      (define tuple (toml:_tokenize (string->list input)))
      (if (null? (car tuple))
        (+= l (cdr tuple))
        (internal-tokenize (list->string (car tuple)) (+= l (cdr tuple)))))
  (internal-tokenize toml []))

(define (toml:_tokenize toml-list) 
  "internal tokenizer method; takes a list of chars and returns rest and tokenized input"
  (if (null? toml-list)
    (list '() '())
  (let* ((token (car toml-list))
         (sub-to-newline (lambda () (indexed-tail toml-list (list-index toml-list #\newline)))))
    (cond ((char=? token #\,) 
            (list (cdr toml-list) ["elem-delim" ","]))
          ((char=? token #\=)
            (list (cdr toml-list) ["prop-delim" "="]))
          ((or (char=? token #\space) (char=? token #\tab))
            (list (cdr toml-list) (list "whitespace" token)))
          ((char=? token #\#) (toml:_tokenize (sub-to-newline)))
          ((char=? token #\newline) (list (cdr toml-list) (list "newline" token)))
          ((char=? token #\]) (list toml-list '()))
          ((char=? token #\[) 
            (begin
              (define tuple (toml:parse-toml-array (cdr toml-list)))
              (list (car tuple) (list "toml-array" (cadr tuple)))))
          ((or (char=? token #\") (char=? token #\'))
            (begin
              (define tuple (toml:parse-toml-string (cdr toml-list) token))
              (list (car tuple) (list "toml-string" (cadr tuple)))))
          ((char-alpha? token)
            (begin
              (define tuple (toml:parse-toml-id toml-list))
                (list (car tuple) (list "toml-id" (cadr tuple)))))
          ((char-num? token) 
            (begin
              (define tuple (toml:parse-toml-num toml-list))
              (list (car tuple) (list "toml-num" (cadr tuple)))))
          (else (list (cdr toml-list) (list "error" token)))))))

(define (toml:parse-toml-id l)
  (define (parse-id x s)
    (if (null? x)
      (list x s)
      (if (char-alpha? (car x))
        (parse-id (cdr x) (++ s (car x)))
        (list x s))))
  (parse-id l ""))

(define (toml:parse-toml-object l)
  (define (parse-object x s)
    (if (null? x)
      (list x (++ s (list "error" "unbalanced object")))
      (if (char=? (car x) #\})
        (list (cdr x) s)
        (begin
          (define tuple (toml:_tokenize x))
          (if (null? (cadr tuple))
            (parse-object (car tuple) s)
            (parse-object (car tuple) (+= s (cadr tuple))))))))
  (parse-object l []))

(define (toml:parse-toml-array l)
  (define (parse-array x s)
    (if (null? x)
      (list x (++ s (list "error" "unbalanced array")))
      (if (char=? (car x) #\])
        (list (cdr x) s)
        (begin
          (define tuple (toml:_tokenize x))
          (if (null? (cadr tuple))
            (parse-array (car tuple) s)
            (parse-array (car tuple) (+= s (cadr tuple))))))))
  (parse-array l []))

(define (toml:parse-toml-string l token)
  (define (parse-string x s)
    (if (null? x)
      (list x (++ (list s) (list "error" "unbalanced string")))
      (if (char=? (car x) token)
        (list (cdr x) s)
        (parse-string (cdr x) (++ s (car x))))))
  (parse-string l ""))

(define (toml:parse-toml-num l)
  (define (parse-num x s)
    (if (null? x)
      (list x s)
      (if (char-num? (car x))
        (parse-num (cdr x) (++ s (car x)))
        (list x s))))
  (parse-num l ""))
